---
import { Image } from 'astro:assets';
import { getCollection } from 'astro:content';
import MainLayout from '../../layouts/MainLayout.astro';
import Pagination from '../../components/Pagination.astro';
import type { CollectionEntry } from 'astro:content';
import type { Page } from '../../types/dataTypes';
import { SITE, ISPARTOF } from '../../data/constant';
import turncateString from '../../utils/turncateString';
import Newsletter from '../../components/sections/Newsletter.astro';

interface Props {
  page: Page;
}

export async function getStaticPaths({ paginate }: any) {
  const PROJECT_PER_PAGE: number = 3;
  const allProjects: CollectionEntry<'projects'>[] = (
    await getCollection('projects')
  ).sort(
    (a: CollectionEntry<'projects'>, b: CollectionEntry<'projects'>) =>
      a.data.pubDate.valueOf() - b.data.pubDate.valueOf()
  );

  // Return a paginated collection of paths
  return paginate(allProjects || [], {
    pageSize: PROJECT_PER_PAGE,
  });
}

// All paginated data is passed on the "page" prop
const { page } = Astro.props;
const title: string = `My Projects | ${SITE.title}`;
const description: string = 'This is my project page.';

const projectList = page.data;
const totalPages = Math.ceil(page.total / 3);
---

<MainLayout
  title={title}
  structuredData={{
    '@context': 'https://schema.org',
    '@type': 'WebPage',
    '@id': 'https://melnerdz.com/projects',
    url: 'https://melnerdz.com/projects',
    name: 'My Projects | Melnerdz website',
    description: description,
    isPartOf: ISPARTOF,
    inLanguage: 'en-US',
  }}
  meta={description}
>
  <section>
    <h1
      class="mx-auto flex items-center justify-center text-center font-headfont text-3xl font-bold md:text-4xl"
    >
      My Project
    </h1>

    <p class="mt-6 hidden text-center font-medium text-white md:block">
      Discover my unique projects, including personal apps and client solutions,
      all tailored to meet specific needs with innovation and quality.
    </p>

    <p class="mt-6 block text-center font-medium text-white md:hidden">
      Discover my unique projects, including personal apps and client solutions
      project.
    </p>

<div
  class="mt-12 grid grid-cols-1 gap-8 sm:grid-cols-2 md:grid-cols-3"
>
  {
    projectList.map((project) => (
      <li
        class="group relative list-none overflow-hidden rounded-xl bg-project shadow-lg transition-transform duration-300 hover:-translate-y-2 hover:shadow-2xl"
      >
        <a href={`/projects/${project.id}`} class="block h-full">
          <!-- Image with gradient overlay -->
          <figure class="relative h-56 overflow-hidden sm:h-64 md:h-52">
            <Image
              class="h-full w-full object-cover transition-transform duration-500 group-hover:scale-110"
              src={project.data.image.src}
              alt={project.data.image.alt}
            />
            <div class="absolute inset-0 bg-gradient-to-t from-black/50 via-black/20 to-transparent opacity-0 transition-opacity duration-300 group-hover:opacity-100"></div>
          </figure>

          <!-- Content Section -->
          <article class="flex flex-col justify-between px-5 py-6">
            <div>
              <h2 class="text-center font-headfont text-lg font-bold text-white transition duration-300 ease-in-out group-hover:text-lblue">
                {project.data.title}
              </h2>
              <p class="mt-3 text-center text-sm font-medium text-projectDesc">
                {turncateString(project.data.shortDesc, 120)}
              </p>
            </div>

            <!-- Technologies -->
            {
              project.data.technology && project.data.technology.length > 0 && (
                <ul class="mt-5 flex flex-wrap justify-center gap-2">
                  {
                    project.data.technology.map((tech: string) => (
                      <li class="rounded-full border border-lblue/30 bg-lblue/10 px-3 py-1 text-xs font-medium text-lblue transition-colors duration-200 group-hover:bg-lblue/20">
                        {tech}
                      </li>
                    ))
                  }
                </ul>
              )
            }
          </article>
        </a>
      </li>
    ))
  }
</div>

    <Pagination
      currentPage={page.currentPage}
      totalPages={totalPages}
      disablePrevious={page.url.prev === undefined}
      disableNext={page.url.next === undefined}
      next={page.url.next}
      prev={page.url.prev}
    />

    <Newsletter />
  </section>
</MainLayout>
